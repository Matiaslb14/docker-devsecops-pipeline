name: ci
on:
  push: { branches: ["main"] }
  pull_request: {}

jobs:
  build-scan-sign:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 1) Conftest (vía Docker)
      - name: Conftest (policies sobre compose)
        run: |
          docker run --rm -v "$PWD:/project" openpolicyagent/conftest:v0.53.0 \
            test /project/compose.yml -p /project/docker/conftest

      # 2) Build local con tag temporal (evitamos owner en mayúsculas)
      - name: Build image (local, temp tag)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: temp:build

      - name: Export image to tar (para Trivy image)
        run: docker save -o image.tar temp:build

      # 3) Scans
      - name: Trivy FS (repo)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '1'

      - name: Trivy Image (sobre image.tar)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          input: image.tar
          scan-type: image
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          exit-code: '1'

      - name: SBOM (Syft CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          image: temp:build
          format: cyclonedx-json
          output-file: reports/sbom.cdx.json

      # 4) Retag a minúsculas y push a GHCR
      - name: Retag + Push to GHCR
        run: |
          OWNER_LC=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${OWNER_LC}/notes-api:${GITHUB_SHA}"
          LATEST="ghcr.io/${OWNER_LC}/notes-api:latest"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "LATEST=$LATEST" >> $GITHUB_ENV

          docker tag temp:build "$IMAGE"
          docker tag temp:build "$LATEST"
          docker push "$IMAGE"
          docker push "$LATEST"

      # 5) Cosign sign/verify (keyless)
      - uses: sigstore/cosign-installer@v3

      - name: Cosign sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign --yes "$IMAGE"

      - name: Cosign verify
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign verify "$IMAGE" | tee reports/cosign_verify.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
